package utilities;

import exceptions.EmptyQueueException;
import java.util.Arrays;

public class MyQueue<E> implements QueueADT<E> {
    private static final int INITIAL_CAPACITY = 10;
    private E[] elements;
    private int size;
    private int front;
    private int rear;

    @SuppressWarnings("unchecked")
    public MyQueue() {
        elements = (E[]) new Object[INITIAL_CAPACITY];
        size = 0;
        front = 0;
        rear = -1;
    }

    @Override
    public void enqueue(E toAdd) throws NullPointerException {
        if (toAdd == null) {
            throw new NullPointerException("Cannot enqueue null element.");
        }

        if (size == elements.length) {
            resize();
        }

        rear = (rear + 1) % elements.length;
        elements[rear] = toAdd;
        size++;
    }

    @Override
    public E dequeue() throws EmptyQueueException {
        if (isEmpty()) {
            throw new EmptyQueueException("Cannot dequeue from an empty queue.");
        }

        E removed = elements[front];
        elements[front] = null;
        front = (front + 1) % elements.length;
        size--;

        return removed;
    }

    @Override
    public E peek() throws EmptyQueueException {
        if (isEmpty()) {
            throw new EmptyQueueException("Cannot peek into an empty queue.");
        }
        return elements[front];
    }

    @Override
    public void dequeueAll() {
        Arrays.fill(elements, null);
        size = 0;
        front = 0;
        rear = -1;
    }

    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    @Override
    public Iterator<E> iterator() {
        return new QueueIterator();
    }

    @Override
    public boolean equals(QueueADT<E> that) {
        if (this.size() != that.size()) {
            return false;
        }

        Iterator<E> thisIterator = this.iterator();
        Iterator<E> thatIterator = that.iterator();

        while (thisIterator.hasNext()) {
            if (!thisIterator.next().equals(thatIterator.next())) {
                return false;
            }
        }
        return true;
    }

    @Override
    public Object[] toArray() {
        return Arrays.copyOf(elements, size);
    }

    @Override
    public E[] toArray(E[] holder) throws NullPointerException {
        if (holder == null) {
            throw new NullPointerException("Specified array cannot be null.");
        }
        if (holder.length < size) {
            return Arrays.copyOf(elements, size, (Class<? extends E[]>) holder.getClass());
        }
        System.arraycopy(elements, 0, holder, 0, size);
        if (holder.length > size) {
            holder[size] = null;
        }
        return holder;
    }

    @Override
    public boolean isFull() {
        return size == elements.length;
    }

    @Override
    public int size() {
        return size;
    }

    @SuppressWarnings("unchecked")
    private void resize() {
        int newCapacity = elements.length * 2;
        E[] newElements = (E[]) new Object[newCapacity];

        int i = 0;
        while (!isEmpty()) {
            newElements[i] = dequeue();
            i++;
        }

        elements = newElements;
        front = 0;
        rear = size - 1;
    }

    private class QueueIterator implements Iterator<E> {
        private int index;
        private int count;

        QueueIterator() {
            index = front;
            count = 0;
        }

        @Override
        public boolean hasNext() {
            return count < size;
        }

        @Override
        public E next() throws EmptyQueueException {
            if (!hasNext()) {
                throw new EmptyQueueException("No more elements in the queue.");
            }

            E current = elements[index];
            index = (index + 1) % elements.length;
            count++;
            return current;
        }
    }
}
